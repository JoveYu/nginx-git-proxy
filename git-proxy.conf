client_body_timeout 3600;
client_header_timeout 3600;
send_timeout 3600;
client_max_body_size 0;

fastcgi_connect_timeout 3600;
fastcgi_send_timeout 3600;
fastcgi_read_timeout 3600;

lua_shared_dict repo_cache 10m;

server {
    listen                80;
    server_name           __NGINX_GIT_DOMAIN__;

    location ~ /(?<git_repo>.+)/(info/refs|git-upload-pack) {
        access_by_lua_block {
            local config_repo = "/srv/git/"
            local config_time_hot = 60

            local git_repo = ngx.var.git_repo
            if not git_repo:match("%.git$") then
                git_repo = git_repo .. ".git"
            end 

            local domain = git_repo:match("^(.-)/")
            local git_repo_full = git_repo
            if domain:match("^.+%.lan$") or domain:match("^%d+%.%d+%.%d+%.%d+$") then
                git_repo_full = "http://" .. git_repo
            else
                git_repo_full = "https://" .. git_repo
            end

            local repo_path = config_repo .. git_repo
            
            local function dir_exists(path)
                local f = io.open(path .. "/FETCH_HEAD" , "r")
                if f then
                    io.close(f)
                    return true
                else
                    return false
                end
            end

            local function init_repo(path, repo)
                local result = os.execute("mkdir -p " .. path ..
                                      " && cd " .. path ..
                                      " && git init --bare " ..
                                      " && git remote add --mirror=fetch origin " .. repo)
                if result ~= 0 then
                    ngx.log(ngx.ERR, "Failed to Init Repo: ", path)
                end
            end

            local function fetch_repo(path)
                local repo_cache = ngx.shared.repo_cache
                local last_fetch = repo_cache:get(path) 
                local current_time = ngx.time()
                if last_fetch == nil or (current_time - last_fetch) >= config_time_hot then
                    local result = os.execute("cd " .. path .. 
                                          " && git -c remote.origin.mirror=true fetch origin '+refs/*:refs/*'")
                    if result ~= 0 then
                        ngx.log(ngx.ERR, "Failed to Fetch Repo: ", path)
                    end
                    
                    repo_cache:set(path, current_time)
                end
            end

            if not dir_exists(repo_path) then
                init_repo(repo_path, git_repo_full)
            end
            fetch_repo(repo_path)
        }

        include             fastcgi_params;
        fastcgi_param       SCRIPT_FILENAME     /usr/lib/git-core/git-http-backend;
        fastcgi_param       PATH_INFO           $uri;
        fastcgi_param       GIT_HTTP_EXPORT_ALL 1;
        fastcgi_param       GIT_PROJECT_ROOT    /srv/git;
        fastcgi_param       HOME                /srv/git;
        fastcgi_pass        unix:/run/fcgiwrap.socket;
    }

    location /cgit-css {
        alias                  /usr/share/cgit/;
    }

    location / {
        include             fastcgi_params;
        fastcgi_param       SCRIPT_FILENAME /usr/lib/cgit/cgit.cgi;
        fastcgi_param       PATH_INFO       $uri;
        fastcgi_param       QUERY_STRING    $args;
        fastcgi_param       HTTP_HOST       $server_name;
        fastcgi_pass        unix:/run/fcgiwrap.socket;
    }
}
